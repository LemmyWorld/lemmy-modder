name: publish-app

on:
  push:
    branches:
      - main
      - develop

jobs:

  publish_app_windows:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: checkout repo
        uses: actions/checkout@v3

      - name: Use Node.js 18.15.0
        uses: actions/setup-node@v3
        with:
          node-version: 18.15.0
     
      - name: set develop version
        run: |
          BRANCH=$(git branch --show-current)
          VERSION=$(jq -r '.version' package.json)

          if [ "$BRANCH" != "main" ]; then
            VERSION="$VERSION-$BRANCH"
          fi

          jq ".version = \"$VERSION\"" package.json > tmp.$$.json && mv tmp.$$.json package.json

          echo "version: $VERSION"

      - name: cache frontend dependencies
        id: cache-frontend-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-frontend-npm
        with:
          path: ./frontend/node_modules/
          key: cache-frontend-npm-${{ hashFiles('frontend/package-lock.json') }}

      - name: install frontend dependencies (if not cached)
        if: steps.cache-frontend-npm.outputs.cache-hit != 'true'
        working-directory: ./frontend
        run: npm ci

      - name: build frontend
        working-directory: ./frontend
        run: npm run build

      - name: publish electron app (win)
        run: |
          docker run --rm -i \
          --env-file <(env | grep -iE 'DEBUG|NODE_|ELECTRON_|YARN_|NPM_|CI|CIRCLE|TRAVIS_TAG|TRAVIS|TRAVIS_REPO_|TRAVIS_BUILD_|TRAVIS_BRANCH|TRAVIS_PULL_REQUEST_|APPVEYOR_|CSC_|GH_|GITHUB_|BT_|AWS_|STRIP|BUILD_') \
          --env ELECTRON_CACHE="/root/.cache/electron" \
          --env ELECTRON_BUILDER_CACHE="/root/.cache/electron-builder" \
          --env GH_TOKEN=${{ secrets.GITHUB_TOKEN }} \
          -v ${PWD}:/project \
          -v ${PWD##*/}-node-modules:/project/node_modules \
          -v ~/.cache/electron:/root/.cache/electron \
          -v ~/.cache/electron-builder:/root/.cache/electron-builder \
          electronuserland/builder:wine \
          bash -c "npm i && npm run build:win:publish"
  
  publish_app_linux:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: checkout repo
        uses: actions/checkout@v3

      - name: Use Node.js 18.15.0
        uses: actions/setup-node@v3
        with:
          node-version: 18.15.0
     
      - name: set develop version
        run: |
          BRANCH=$(git branch --show-current)
          VERSION=$(jq -r '.version' package.json)

          if [ "$BRANCH" != "main" ]; then
            VERSION="$VERSION-$BRANCH"
          fi

          jq ".version = \"$VERSION\"" package.json > tmp.$$.json && mv tmp.$$.json package.json

          echo "version: $VERSION"

      - name: cache frontend dependencies
        id: cache-frontend-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-frontend-npm
        with:
          path: ./frontend/node_modules/
          key: cache-frontend-npm-${{ hashFiles('frontend/package-lock.json') }}

      - name: install frontend dependencies (if not cached)
        if: steps.cache-frontend-npm.outputs.cache-hit != 'true'
        working-directory: ./frontend
        run: npm ci

      - name: build frontend
        working-directory: ./frontend
        run: npm run build

      - name: cache app dependencies
        id: cache-app-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-app-npm
        with:
          path: ./node_modules/
          key: cache-app-npm-${{ hashFiles('package-lock.json') }}

      - name: install app dependencies (if not cached)
        if: steps.cache-app-npm.outputs.cache-hit != 'true'
        run: npm ci

      - name: publish app linux
        run: npm run build:linux:publish
